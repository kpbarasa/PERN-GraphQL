# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that start
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#     Merge Query:  Shift-Ctrl-M (or press the merge button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#
#  {
#   post(post_id:1){
#     post_title,
#     author_id,
#     posts{
#     author_name  
#     }
#   },
#   posts{
#     post_title
#   }
  
#   author(author_id:1){
#     author_name,
#     authors{
#       post_title
#     }
#   }
  # authors{
  #   author_id,
  #   author_name,
  #   author_age,
  #   author_type,
  #   author_email,
  #   authors{
  #     post_title
  #   }
  # },
#   posts{
#     post_id,
#     post_type,
#     post_title,
#     post_description,
#     posts{
#       author_name,
#       author_email
#     }
    
#    }
# }

# mutation{
  
#   addPost(
#     post_title:"title", 
#     post_type:"b", 
#     post_description:"decription", 
#     date:"01/18/2023", 
#     author_id:1
#   ){
#     post_title
#     post_type
#     post_description
#     date
#     author_id
#   }
  
  # addAuthor(
  #   author_name:"author", 
  #   author_age:22, 
  #   author_type:"decription", 
  #   author_email:"email@emial.com", 
  # ){
  #   author_name
  #   author_age
  #   author_type
  #   author_email
  # }
  
# }
# {
#   authors{
#     author_name
#   }
# }

{
  posts{
    post_title
  }
}









